// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mrsufgi/projects-manager/internal/domain (interfaces: EventsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/mrsufgi/projects-manager/internal/domain"
	reflect "reflect"
)

// MockEventsRepository is a mock of EventsRepository interface
type MockEventsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventsRepositoryMockRecorder
}

// MockEventsRepositoryMockRecorder is the mock recorder for MockEventsRepository
type MockEventsRepositoryMockRecorder struct {
	mock *MockEventsRepository
}

// NewMockEventsRepository creates a new mock instance
func NewMockEventsRepository(ctrl *gomock.Controller) *MockEventsRepository {
	mock := &MockEventsRepository{ctrl: ctrl}
	mock.recorder = &MockEventsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventsRepository) EXPECT() *MockEventsRepositoryMockRecorder {
	return m.recorder
}

// AddEvent mocks base method
func (m *MockEventsRepository) AddEvent(arg0 domain.Event) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEvent indicates an expected call of AddEvent
func (mr *MockEventsRepositoryMockRecorder) AddEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockEventsRepository)(nil).AddEvent), arg0)
}

// ReadEvent mocks base method
func (m *MockEventsRepository) ReadEvent(arg0 int) (*domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEvent", arg0)
	ret0, _ := ret[0].(*domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEvent indicates an expected call of ReadEvent
func (mr *MockEventsRepositoryMockRecorder) ReadEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEvent", reflect.TypeOf((*MockEventsRepository)(nil).ReadEvent), arg0)
}

// SearchEvents mocks base method
func (m *MockEventsRepository) SearchEvents(arg0 domain.SearchEventsInput) (*[]domain.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchEvents", arg0)
	ret0, _ := ret[0].(*[]domain.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchEvents indicates an expected call of SearchEvents
func (mr *MockEventsRepositoryMockRecorder) SearchEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchEvents", reflect.TypeOf((*MockEventsRepository)(nil).SearchEvents), arg0)
}
